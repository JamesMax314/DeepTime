// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
StructuredBuffer<float> meshHeight;
RWTexture2D<float4> Result;
int linearRes;
int radius;

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float Random(uint seed)
{
    return float(Hash(seed)) / 4294967295.0; // 2^32-1
}

float rand(uint2 Seed)
{
    float randomno =  frac(sin(dot(Seed, float2(12.9898, 78.233)))*43758.5453);
    float Out = lerp(0, 1, randomno);
    return Out;
}

bool CheckPos(float2 pos)
{
    bool safe = true;
    if (pos.x < 0 || pos.x >= linearRes || pos.y < 0 || pos.y >= linearRes)
    {
        safe = false;
    }
    return safe;
}

float getH(int xCoord, int yCoord)
{
    float height = 1;
    if (xCoord >=0 && xCoord < linearRes && yCoord >=0 && yCoord < linearRes)
    {
        int index = linearRes*xCoord + yCoord;
        height = meshHeight[index];
    }
    return height;
}

float2 getInterpGrad(float2 pos)
{
    float2 grad;

    // Get closest grid point
    int ix = floor(pos.x);
    int iy = floor(pos.y);

    // Offsets to actual position
    float u = pos.x - ix;
    float v = pos.y - iy;

    // Current heights
    float h00=getH(ix, iy);
    float h10=getH(ix+1, iy);
    float h01=getH(ix, iy+1);
    float h11=getH(ix+1, iy+1);

    // Interpolated gradient
    grad.x = (h10-h00)*(1-v) + (h11-h01)*v;
    grad.y = (h01-h00)*(1-u) + (h11-h10)*u;

    return grad;
}

float getInterpH(float2 pos)
{
    // Get closest grid point
    int ix = floor(pos.x);
    int iy = floor(pos.y);

    // Offsets to actual position
    float u = pos.x - ix;
    float v = pos.y - iy;

    // Current heights
    float h00=getH(ix, iy);
    float h10=getH(ix+1, iy);
    float h01=getH(ix, iy+1);
    float h11=getH(ix+1, iy+1);

    // Bilinear interpolated height
    float height = (1-v)*((1-u)*h00 + u*h10) + v*((1-u)*h01 + u*h11);

    return height;
}

void DepositAt(float2 pos, float deltaHeight)
{
    int ix = (int)pos.x;
    int iy = (int)pos.y;

    if (CheckPos(pos))
    {
        int index = linearRes*ix + iy;
        uint2 intPos = uint2(ix, iy);
        Result[intPos] = 1;//deltaHeight;
    }
}

void DepositHeight(float2 pos, float deltaHeight)
{
    // Get closest grid point
    int ix = floor(pos.x);
    int iy = floor(pos.y);

    float weights[100];
    float weightSum = 0;

    int halfRad = floor(radius);

    for (int i=0; i<radius; i++)
    {
        for (int j=0; j<radius; j++)
        {
            float2 position = float2(ix+i, iy+j);
            float distance = length(position-pos);
            weights[i*radius + j] = max(0, radius-distance);
            weightSum += weights[i*radius + j];
        }
    }
    // Debug.Log("WeightSum: "+weightSum);
    if (weightSum > 0) {
        for (int i=0; i<radius; i++)
        {
            for (int j=0; j<radius; j++)
            {
                float2 position = float2(ix+i, iy+j);
                weights[i*radius + j] /= weightSum;
                // Debug.Log("weight: "+weights[i, j]);
                DepositAt(position, deltaHeight*weights[i*radius + j]);
            }
        }
    }
}

void DepositeLocal(float2 pos, float deltaHeight)
{
    // Get closest grid point
    int ix = floor(pos.x);
    int iy = floor(pos.y);

    // Offsets to actual position
    float u = pos.x - ix;
    float v = pos.y - iy;

    // Extrapolate deposition
    DepositAt(float2(ix, iy), deltaHeight*(1-u)*(1-v));
    DepositAt(float2(ix+1, iy), deltaHeight*(u)*(1-v));
    DepositAt(float2(ix, iy+1), deltaHeight*(1-u)*(v));
    DepositAt(float2(ix+1, iy+1), deltaHeight*(u)*(v));
}

void Errode(uint3 id)
{
    int numDrops = 1;
    int numSteps = 64;

    float vel;
    float water;
    float sediment;
    float carryCapacity;

    float height;
    float heightNew;

    // Parameters
    float Pintertia = 0.3; // Inertia
    float Pminslope = 0.01; // Allows errosion of flat regions
    float Pcapacity = 8; // Carry capacity modifier
    float Pdeposition = 0.002; // Fraction of eccess sediment that is dropped by deposition
    float Perrosion = 0.7; // Fraction of remaining carry capacity that is taken up by errosion
    float Pgravity = 10; // Controlls water speedup
    float Pevaporation = 0.02; // Evaporation removes water from drop

    float2 pos;
    float2 posNew;
    float2 dir;
    float2 grad;

    for (int dropIndex=0; dropIndex<numDrops; dropIndex++)
    {
        vel = 0;
        water = 1;
        sediment = 0;
        dir.x = 0;
        dir.y = 0;

        // init drop start pos
        int xInd = int(linearRes*Random(id.x));
        int zInd = int(linearRes*Random(id.y));
        pos.x = xInd;
        pos.y = zInd;


        for (int stepIndex=0; stepIndex<numSteps; stepIndex++)
        {
            if (!CheckPos(pos))
            {
                break;
            }

            height = getInterpH(pos);
            grad = getInterpGrad(pos);
            float gradLen = length(grad);
            grad = grad / gradLen;


            // Compute new direction of motion taking inertia into account
            dir = (dir*Pintertia - grad*(1-Pintertia));
            float dirLen = length(dir);
            dir = dir / dirLen;
            posNew = pos + dir;

        
            // Compute new interpolated height
            heightNew = getInterpH(posNew);
            float deltaHeight = heightNew - height;


            // If enters pit deposit to overcome
            if (deltaHeight > Pminslope)
            {
                if (sediment < deltaHeight)
                {
                    // Drop all sediment
                    DepositeLocal(pos, sediment);
                    break;
                }

                // Deposite deltaHeight 
                DepositeLocal(pos, deltaHeight);
                sediment -= deltaHeight;
            } else {
                // else compute new carry capacity
                carryCapacity = max(-deltaHeight, Pminslope)*vel*water*Pcapacity;

                if (sediment > carryCapacity)
                {
                    // if sediment > carry capacity deposite some fraction
                    float toDeposite = (sediment - carryCapacity)*Pdeposition;
                    DepositeLocal(pos, toDeposite);
                    sediment -= toDeposite;
                } else {
                    // if sediment < carry capacity take up some fraction
                    // Never take up more sediment than height difference
                    float toErrode = max((carryCapacity-sediment)*Perrosion, -deltaHeight);
                    DepositHeight(pos, -toErrode);
                    sediment += toErrode;
                }
            }

            // Update speed of motion
            vel = sqrt(vel*vel - deltaHeight*Pgravity);
            // Evaporate water from drop
            water *= 1-Pevaporation;
            pos = posNew;
        }
    } 
}

void test(uint3 id)
{
    float linearR = 512;
    float seed = float(id.x);
    float xInd = int(linearRes*Random(id.x));
    int zInd = int(linearRes*Random(id.y));
    //Result[uint2(xInd, zInd)] = float4(Random(id.x), Random(id.y), Random(id.x), 1.0);
    uint2 pos = uint2(xInd, zInd);
    Result[pos] = float4(Random(id.x), Random(id.y), Random(id.x), 1.0);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //int index = 512*id.x + id.y;
    int xInd = (linearRes*Random(id.x));
    int zInd = (linearRes*Random(id.y));
    //Result[uint2(id.x, id.y)] = float4(Random(id.x), Random(id.y), Random(id.x), 1.0);
    //test(id);
    Errode(id);
}